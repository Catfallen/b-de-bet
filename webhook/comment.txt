async function webhook(req, res) {
    try {
        // 1Ô∏è‚É£ Responde r√°pido para o Mercado Pago n√£o reenviar notifica√ß√µes
        res.sendStatus(200);

        // 2Ô∏è‚É£ Extrai o body do webhook e o paymentId
        const body = req.body;
        const paymentId = body.data?.id || body.id;

        if (!paymentId) {
            console.warn("‚ö†Ô∏è Webhook recebido sem payment id:", body);
            return;
        }

        // 3Ô∏è‚É£ Evita processar o mesmo pagamento v√°rias vezes em curto per√≠odo
        if (processedPayments.has(paymentId)) {
            console.log("Pagamento j√° processado:", paymentId);
            return;
        }
        processedPayments.add(paymentId);
        setTimeout(() => processedPayments.delete(paymentId), 60000); // limpa cache em 1 minuto

        // 4Ô∏è‚É£ Consulta detalhes do pagamento usando SDK do Mercado Pago
        const paymentInstance = new Payment(client);
        const info = await paymentInstance.get({ id: paymentId });

        // 5Ô∏è‚É£ Extrai o status do pagamento
        const status = info.status || 'unknown';
        console.log(`üí∞ Pagamento ${paymentId} status: ${status}`);

        // 6Ô∏è‚É£ Aqui voc√™ precisa inserir ou atualizar o registro na tabela 'pagamentos'
        // INSERT INTO pagamentos (payment_id, status, valor, payload, data_recebimento)
        // VALUES (paymentId, status, info.transaction_amount, info, NOW())
        // ON CONFLICT (payment_id) DO UPDATE SET status = EXCLUDED.status, valor = EXCLUDED.valor, payload = EXCLUDED.payload;

        // 7Ô∏è‚É£ Lida com os diferentes status de pagamento
        if (status === 'approved') {
            console.log(`‚úÖ Pagamento aprovado!`);
            // a) Inserir uma transa√ß√£o na tabela 'transacoes' do tipo 'deposito'
            // INSERT INTO transacoes (pagamento_id, tipo, valor, data_transacao)
            // VALUES (paymentId, 'deposito', info.transaction_amount, NOW());
            
            // b) A trigger no banco ir√° automaticamente atualizar o saldo na tabela 'monetaria'

            // c) Aqui voc√™ pode: enviar email, liberar produto, logar detalhes, etc.

        } else if (status === 'rejected') {
            console.log(`‚ùå Pagamento rejeitado.`);
            // Opcional: registrar tentativa de pagamento rejeitado
        } else if (status === 'pending'){
            console.log(`üïí Pagamento Pendente.`);
            // Opcional: enviar alerta para o usu√°rio que o pagamento ainda n√£o foi confirmado
        } else if (status === 'cancelled'){  
            console.log(`PAGAMENTO CANCELADO`);
            // Opcional: atualizar registro de pagamento ou transa√ß√£o se necess√°rio
        } else {
            console.log("Status inv√°lido")
        }

        // 8Ô∏è‚É£ Opcional: armazenar payload completo do webhook para hist√≥rico ou auditoria
        // INSERT INTO pagamentos (payload) VALUES (body);

    } catch (err) {
        console.error("‚ùóErro processando webhook:", err);
    }
}
